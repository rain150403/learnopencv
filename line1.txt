/*
先初始化，再求每一列的灰度差之和，再求均值
记录哪一列的灰度差均值最大
事先设定一个阈值，当最大的灰度差均值小于该阈值时，证明没有检测到直线
从左往右，找灰度差均值最大的列
从右往左， 找灰度差均值最大的列

一面比较左右的最大均值差， 确定x坐标，一面看看想要从哪个方向开始检测， 结果会不一样
还有就是会给直线设定一定的宽度范围
*/


#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int detectThreshold = 10;
int detectDirection = 0;
int lineNum = 0;
bool LineDetectMethod(cv::Mat &srcImg, int detectThreshold, int detectDirection, int lineNum, float &aLine, float &bLine, float &cLine);

int main(){
	Mat src = imread("10.jpg");
	imshow("src", src);
	float aLine = 0.0, bLine = 0.0, cLine = 0.0;

	bool testFlag = 0;

	testFlag = LineDetectMethod(src, detectThreshold, detectDirection, lineNum, aLine, bLine, cLine);

	if (testFlag == true){

		//Point2f  onePoint2f, twoPoint2f;  ///02110    //测横线，效果不错

		//onePoint2f.x = 0 + cLine*sin(0);
		//onePoint2f.y = 0 + cLine*cos(0);
		//// Point Two
		//twoPoint2f.x = src.cols + cLine*sin(0);
		//twoPoint2f.y = 0 + cLine*cos(0);

		//aLine = -1;
		//bLine = -tan(0);
		//cLine = int(-bLine*onePoint2f.x - aLine*onePoint2f.y);

		////cvtColor(src, src, CV_GRAY2BGR);
		//line(src, Point(onePoint2f), Point(twoPoint2f), cv::Scalar(0, 255, 0), 20);

		// 绘制直线
		Point2f  onePoint2f, twoPoint2f;    //测竖线，有些问题，不知道怎么回事

		onePoint2f.x = 0 + cLine*cos(0);
		onePoint2f.y = 0 + cLine*sin(0);
		// Point Two
		twoPoint2f.x = 0 + cLine*cos(0);
		twoPoint2f.y = src.rows + cLine*sin(0);

		aLine = -tan(0);
		bLine = -1;
		cLine = int(-bLine*onePoint2f.x - aLine*onePoint2f.y);

		//cvtColor(src, src, CV_GRAY2BGR);
		line(src, Point(onePoint2f), Point(twoPoint2f), cv::Scalar(0, 255, 0), 10);
	}
	imshow("12", src);
	cout << testFlag << endl;

	waitKey(0);
	system("pause");
	return 0;
}

bool LineDetectMethod(cv::Mat &srcImg,int detectThreshold, int detectDirection, int lineNum, float &aLine, float &bLine, float &cLine)       //detectDirection   有1，2，3，几种吧    ///lineNum 取0，1
{
	const int grayValThr = 2;   // 线阈值设置应该在10以内
	const int pixelSet = detectThreshold;    //这两个阈值分不清，不知道哪个是哪个
	int row = srcImg.rows;
	int col = srcImg.cols;
	Mat srcGray = srcImg;
	int i = 0, j = 0;
	//cvtColor(srcImg, srcGray, CV_BGR2GRAY);  
	//srcGray = srcImg;  

	// 左右
	if (detectDirection == 0 || detectDirection == 1)
	{
		// 找每列像素值总的变化值  
		vector<int>  grayVerdiff(col);
		for (j = 0; j < col; j++)
		{
			grayVerdiff[j] = 0;   // 初始化为0
		}
		for (i = 0; i < row; i++)
		{
			for (j = 1 + detectThreshold; j < col; j++)
			{
				grayVerdiff[j] += abs(srcGray.at<uchar>(i, j) - srcGray.at<uchar>(i, j - 1 - detectThreshold));               //我觉得threshold就是线宽， 所以j才从1+threshold开始算
			}
		}
		for (j = 0; j < col; j++)
		{
			//grayVerdiff[j] = int(float(grayVerdiff[j]) / float(row));
			grayVerdiff[j] = int(float(grayVerdiff[j]) / float(row) + 0.5);
		}

		//先初始化，再求每一列的灰度差之和，再求平均值


		int xypix = 1;
		int xypixFirst = 1;
		int xypixSecond = 1;

		int gerrMax = 0;
		int gerrMaxFirst = 0;
		int gerrMaxSecond = 0;
		
		int js = 1;
		int jsFirst = 1;
		int jsSecond = 1;
		
		for (js = 1; js < col; js++)
		{
			if (gerrMax < grayVerdiff[js])
			{
				gerrMax = grayVerdiff[js];                  //记录哪列的灰度差均值最大
				xypix = js;
			}
		}
		if (gerrMax < grayValThr)
		{
			return false;                       // 我事先设定了一个阈值，当最大的灰度差均值小于该阈值时，就证明没有检测到直线
		}

		for (jsFirst = 1; jsFirst < xypix - pixelSet; jsFirst++)
		{
			if (gerrMaxFirst <= grayVerdiff[jsFirst] && grayVerdiff[jsFirst] < gerrMax)     //pixelSet ，threshold可能表示线宽， 从左往右，找灰度差均值最大的位置
			{
				gerrMaxFirst = grayVerdiff[jsFirst];                            //但奇怪的是，为什么要同时满足两个小于
				xypixFirst = jsFirst;
			}
		}
		for (jsSecond = col - 1; jsSecond > xypix + pixelSet; jsSecond--)               // 从右往左，找灰度差均值最大的位置
		{
			if (gerrMaxSecond < grayVerdiff[jsSecond] && grayVerdiff[jsSecond] < gerrMax)
			{
				gerrMaxSecond = grayVerdiff[jsSecond];
				xypixSecond = jsSecond;
			}
		}
		if (detectDirection == 0)// 从左到右  
		{
			if (gerrMaxFirst>gerrMaxSecond && gerrMaxFirst>grayValThr && lineNum == 0)               ///再看看是左边的大一点还是右边的大一点，确定x坐标
			{
				xypix = xypixFirst;
			}
			else if (gerrMaxFirst <= gerrMaxSecond && gerrMaxFirst>grayValThr && lineNum == 1)
			{
				xypix = xypixSecond;
			}
		}
		else if (detectDirection == 1)  // 从右到左 
		{
			if (gerrMaxFirst>gerrMaxSecond && gerrMaxFirst>grayValThr && lineNum == 1)
			{
				xypix = xypixFirst;
			}
			else if (gerrMaxFirst <= gerrMaxSecond && gerrMaxFirst>grayValThr && lineNum == 0)
			{
				xypix = xypixSecond;
			}
		}
		aLine = 0;
		bLine = -1;
		cLine = xypix;
		//// 找中心点  
		//xCenterPoint = int(float(row) / 2);
		//yCenterPoint = xypix;
		return true;
	}
	// 上下边缘  
	else if (detectDirection == 2 || detectDirection == 3)
	{
		// 找每列像素值总的变化值  
		vector<int>  grayVerdiff(row);
		for (i = 0; i < row; i++)
		{
			grayVerdiff[i] = 0;   // 初始化为0
		}
		for (i = 1 + detectThreshold; i < row; i++)
		{
			for (j = 0; j < col; j++)
			{
				grayVerdiff[i] += abs(srcGray.at<uchar>(i, j) - srcGray.at<uchar>(i - 1 - detectThreshold, j));
			}
		}
		for (i = 0; i < row; i++)
		{
			//grayVerdiff[i] = int(float(grayVerdiff[i]) / float(col));
			grayVerdiff[i] = int(float(grayVerdiff[i]) / float(col) + 0.5);   
		}
	
		int xypix = 1;
		int xypixFirst = 1;
		int xypixSecond = 1;
		int gerrMax = 0;
		int gerrMaxFirst = 0;
		int gerrMaxSecond = 0;
		int js = 1;
		int jsFirst = 1;
		int jsSecond = 1;
		for (js = 1; js < row; js++)
		{
			if (gerrMax < grayVerdiff[js])
			{
				gerrMax = grayVerdiff[js];
				xypix = js;
			}
		}
		if (gerrMax < grayValThr)
		{
			return false;
		}
	
		for (jsFirst = 1; jsFirst < xypix - pixelSet; jsFirst++)
		{
			if (gerrMaxFirst <= grayVerdiff[jsFirst] && grayVerdiff[jsFirst] < gerrMax)
			{
				gerrMaxFirst = grayVerdiff[jsFirst];
				xypixFirst = jsFirst;
			}
		}
		for (jsSecond = row - 1; jsSecond > xypix + pixelSet; jsSecond--)
		{
			if (gerrMaxSecond <= grayVerdiff[jsSecond] && grayVerdiff[jsSecond] < gerrMax)
			{
				gerrMaxSecond = grayVerdiff[jsSecond];
				xypixSecond = jsSecond;
			}
		}
		if (detectDirection == 2)  //从上到下  
		{
			if (gerrMaxFirst>gerrMaxSecond && gerrMaxFirst>grayValThr && lineNum == 0)
			{
				xypix = xypixFirst;
			}
			else if (gerrMaxFirst <= gerrMaxSecond && gerrMaxFirst>grayValThr && lineNum == 1)
			{
				xypix = xypixSecond;
			}
		}
		else if (detectDirection == 3)  // 从下到上  
		{
			if (gerrMaxFirst>gerrMaxSecond && gerrMaxFirst>grayValThr && lineNum == 1)
			{
				xypix = xypixFirst;
			}
			else if (gerrMaxFirst <= gerrMaxSecond && gerrMaxFirst>grayValThr && lineNum == 0)
			{
				xypix = xypixSecond;
			}
		}
		aLine = -1;
		bLine = 0;
		cLine = xypix;
		//// 找中心点  
		//yCenterPoint = int(float(col) / 2);
		//xCenterPoint = xypix;
		return true;
	}
}
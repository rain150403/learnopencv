/*
1.统计每个灰度下的像素个数， 像素值为i的点有多少个
2.统计灰度频率， 一共有多少个像素点， 每个灰度值的像素个数占总体的比例
3.计算累计密度， 

//gray_distribution[0] = gray_prob[0];
//for (int i = 1; i < 256; i++)
//{
//	gray_distribution[i] = gray_distribution[i - 1] + gray_prob[i];
//}

g[3] = p[0] + p[1] + p[2] + p[3]

所谓累计密度，就是前面所有比例值之和。也有256个累计密度


4.重新计算均衡化后的灰度值， 四舍五入， 参考公式：（N-1）*T+0.5
gray_equal[i] = (uchar)(255 * gray_distribution[i] + 0.5);
从低到高，每一个像素值的映射结果（比例），都是前面比例的和， 比例增加了，
对比度自然拉大了，也就是黑色所占比例最低，白色所占比例最高


5.直方图均衡化，更新原图每个点的像素值

calHist就是统计一个范围内像素的个数，用来表征衣服图像像素值的分布情况

图像的像素灰度变化是随机的，直方图的图形高低不齐，直方图均衡化就是用一定的算法使得直方图大致平和。

简言之，通过拉伸像素强度分布范围来增强图像对比度

处理结果近似均匀分布，动态范围扩大了， 但其本质是扩大了量化间隔， 而量化级别反而减少了，因此，原来灰度不同的像素经处理可能变得相同，
形成了一片相同灰度的区域， 各区域之间有明显的边界，从而出现了伪轮廓。
本身对比度高，灰度调和，对比度降低
本身泛白缓和，合并一些像素灰度，从而增加对比度

对于minMaxLoc无非就是遍历整张图像，返回像素值最大最小的位置
*/


#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

using namespace cv;
using namespace std;

int gray[256] = { 0 };  //记录每个灰度级别下的像素个数
double gray_prob[256] = { 0 };  //记录灰度分布密度
double gray_distribution[256] = { 0 };  //记录累计密度
int gray_equal[256] = { 0 };  //均衡化后的灰度值

int gray_sum = 0;  //像素总数

Mat equalize_hist(Mat& input);
void show_histogram(Mat& img);

int main(){
	Mat src = imread("8.jpg");
	imshow("src", src);
	cvtColor(src, src, CV_BGR2GRAY);
	imshow("gray", src);	
	//show_histogram(src);
	Mat eqImg;
	eqImg = equalize_hist(src);
	imshow("ans", eqImg);
	waitKey(0);
	system("pause");
	return 0;
}

Mat equalize_hist(Mat& input)
{
	Mat output = input.clone();
	gray_sum = input.cols * input.rows;

	//统计每个灰度下的像素个数
	for (int i = 0; i < input.rows; i++)
	{
		uchar* p = input.ptr<uchar>(i);   // 使用image.ptr可以得到图像任意行的首地址
		for (int j = 0; j < input.cols; j++)
		{
			int vaule = p[j];
			gray[vaule]++;
		}
	}


	//统计灰度频率
	for (int i = 0; i < 256; i++)
	{
		gray_prob[i] = ((double)gray[i] / gray_sum);
	}

	//计算累计密度
	gray_distribution[0] = gray_prob[0];
	for (int i = 1; i < 256; i++)
	{
		gray_distribution[i] = gray_distribution[i - 1] + gray_prob[i];
	}

	//重新计算均衡化后的灰度值，四舍五入。参考公式：(N-1)*T+0.5
	for (int i = 0; i < 256; i++)
	{
		gray_equal[i] = (uchar)(255 * gray_distribution[i] + 0.5);
	}


	//直方图均衡化,更新原图每个点的像素值
	for (int i = 0; i < output.rows; i++)
	{
		uchar* p = output.ptr<uchar>(i);
		for (int j = 0; j < output.cols; j++)
		{
			p[j] = gray_equal[p[j]];
		}
	}

	show_histogram(output);

	return output;
}

void show_histogram(Mat& img)
{
	//为计算直方图配置变量  
	//首先是需要计算的图像的通道，就是需要计算图像的哪个通道（bgr空间需要确定计算 b或g货r空间）  
	int channels = 0;
	//然后是配置输出的结果存储的 空间 ，用MatND类型来存储结果  
	MatND dstHist;
	//接下来是直方图的每一个维度的 柱条的数目（就是将数值分组，共有多少组）  
	int histSize[] = { 256 };       //如果这里写成int histSize = 256;   那么下面调用计算直方图的函数的时候，该变量需要写 &histSize  
	//最后是确定每个维度的取值范围，就是横坐标的总数  
	//首先得定义一个变量用来存储 单个维度的 数值的取值范围  
	float midRanges[] = { 0, 256 };
	const float *ranges[] = { midRanges };

	calcHist(&img, 1, &channels, Mat(), dstHist, 1, histSize, ranges, true, false);

	//calcHist  函数调用结束后，dstHist变量中将储存了 直方图的信息  用dstHist的模版函数 at<Type>(i)得到第i个柱条的值  
	//at<Type>(i, j)得到第i个并且第j个柱条的值  

	//开始直观的显示直方图――绘制直方图  
	//首先先创建一个黑底的图像，为了可以显示彩色，所以该绘制图像是一个8位的3通道图像  
	Mat drawImage = Mat::zeros(Size(256, 256), CV_8UC3);
	//因为任何一个图像的某个像素的总个数，都有可能会有很多，会超出所定义的图像的尺寸，针对这种情况，先对个数进行范围的限制  
	//先用 minMaxLoc函数来得到计算直方图后的像素的最大个数  
	double g_dHistMaxValue;
	minMaxLoc(dstHist, 0, &g_dHistMaxValue, 0, 0);
	//将像素的个数整合到 图像的最大范围内  
	//遍历直方图得到的数据  
	for (int i = 0; i < 256; i++)
	{
		int value = cvRound(dstHist.at<float>(i) * 256 * 0.9 / g_dHistMaxValue);

		line(drawImage, Point(i, drawImage.rows - 1), Point(i, drawImage.rows - 1 - value), Scalar(255, 255, 255));
	}

	imshow("【原图直方图】", drawImage);
}